generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model carreras {
  idCarreras       Int          @id @default(autoincrement())
  planEstudios     Int
  jefeDepartamento String
  creditos         Int
  nombre           String
  planestudios     planestudios @relation(fields: [planEstudios], references: [idPlan], onDelete: NoAction, onUpdate: NoAction, map: "fk_carreras_planestudios")
  estudiante       estudiante[]

  @@index([planEstudios], map: "fk_carreras_planestudios")
}

model docente {
  idDocente           Int            @id @default(autoincrement())
  nombre              String
  curp                String
  direccion           String
  telefono            String
  correoPersonal      String
  correoInstitucional String
  titulo              String
  plazas              String
  puesto              String
  departamento        String
  actividadcom        actividadcom[]
  grupo               grupo[]
}

model documentos {
  idDocumentos                   Int        @id
  actaNacimiento                 Bytes
  certificadoBachillerato        Bytes
  contratoEstudiante             Bytes
  formatoActualizadoCurp         Bytes
  resolucionRevalidacionEstudios Bytes
  solicitudInscripcion           Bytes
  cartaServicioSocial            Bytes
  tarjetaResidenteTemporal       Bytes
  idEstudiante                   Int
  estudiante                     estudiante @relation(fields: [idEstudiante], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "idEstudiante")

  @@index([idEstudiante], map: "idEstudiante")
}

model estudiante {
  idEstudiante                                               Int                   @unique @default(autoincrement())
  nombre                                                     String
  modalidad                                                  Int
  curp                                                       String
  fotoPerfil                                                 String
  telefono                                                   String
  correoInstitucional                                        String                @unique
  correoPersonal                                             String
  periodoIngreso                                             String
  periodoActual                                              String
  situacion                                                  String
  escuelaProcedencia                                         String
  fechaNacimiento                                            DateTime
  ciudad                                                     String
  direccion                                                  String
  idCarrera                                                  Int
  actividadcom                                               actividadcom[]
  adeudos                                                    adeudos[]
  calificaciones                                             calificaciones[]
  documentos                                                 documentos[]
  carreras                                                   carreras              @relation(fields: [idCarrera], references: [idCarreras], map: "Estudiante_idCarrera_fkey")
  modalidad_estudiante_modalidadTomodalidad                  modalidad             @relation("estudiante_modalidadTomodalidad", fields: [modalidad], references: [idModalidad], onDelete: NoAction, onUpdate: NoAction, map: "fk_estudiante_modalidad")
  evaluaciondocente                                          evaluaciondocente[]
  grupoestudiante                                            grupoestudiante[]
  materiaestudiante_materiaestudiante_estudianteToestudiante materiaestudiante[]   @relation("materiaestudiante_estudianteToestudiante")
  residencias                                                residencias[]
  serviciosestudiante                                        serviciosestudiante[]
  usuarios                                                   usuarios[]

  @@id([idEstudiante, modalidad])
  @@index([idCarrera], map: "Estudiante_idCarrera_fkey")
  @@index([modalidad], map: "fk_estudiante_modalidad")
}

model usuarios {
  idUsuarios         Int        @id @default(autoincrement())
  passwordUsuarios   String
  estudianteUsuarios Int
  estudiante         estudiante @relation(fields: [estudianteUsuarios], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "Usuarios_estudiantes_fkey")

  @@index([estudianteUsuarios], map: "Usuarios_estudiantes_fkey_idx")
}

model materia {
  idMateria                                            Int                 @id @default(autoincrement())
  materiaPrevia                                        String?             @db.Text
  materiaDependiente                                   String?             @db.Text
  planEstudios                                         Int
  nombre                                               String              @db.Text
  creditos                                             Int
  semestre                                             Int
  calificaciones                                       calificaciones[]
  grupo                                                grupo[]
  planestudios                                         planestudios        @relation(fields: [planEstudios], references: [idPlan], onDelete: NoAction, onUpdate: NoAction, map: "materia_ibfk_1")
  materiaestudiante_materiaestudiante_materiaTomateria materiaestudiante[] @relation("materiaestudiante_materiaTomateria")

  @@index([planEstudios], map: "planEstudios")
}

model modalidad {
  idModalidad                                Int          @id @default(autoincrement())
  nombreModalidad                            String       @db.VarChar(50)
  estudiante_estudiante_modalidadTomodalidad estudiante[] @relation("estudiante_modalidadTomodalidad")
}

model planestudios {
  idPlan            Int        @id @default(autoincrement())
  nombrePlanEstudio String?    @db.VarChar(50)
  carreras          carreras[]
  materia           materia[]
}

model trabajador {
  idTrabajador Int    @id @default(autoincrement())
  puesto       String @db.VarChar(50)
}

model materiaestudiante {
  idMateriaEstudiante                                 Int        @id @default(autoincrement())
  estudiante                                          Int
  materia                                             Int
  estado                                              Int
  estudiante_materiaestudiante_estudianteToestudiante estudiante @relation("materiaestudiante_estudianteToestudiante", fields: [estudiante], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "estudiante")
  materia_materiaestudiante_materiaTomateria          materia    @relation("materiaestudiante_materiaTomateria", fields: [materia], references: [idMateria], onDelete: NoAction, onUpdate: NoAction, map: "materia")

  @@index([estudiante], map: "estudiante_idx")
  @@index([materia], map: "materia_idx")
}

model actividadcom {
  idActividadCom   Int        @id @default(autoincrement())
  estudianteAct    Int
  periodo          String     @db.VarChar(45)
  nombreActividad  String     @db.VarChar(45)
  creditos         String     @db.VarChar(10)
  horas            String     @db.VarChar(10)
  tutorResponsable Int
  calificacion     Int
  estudiante       estudiante @relation(fields: [estudianteAct], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "estudianteActCom")
  docente          docente    @relation(fields: [tutorResponsable], references: [idDocente], onDelete: NoAction, onUpdate: NoAction, map: "tutorAct")

  @@index([estudianteAct], map: "estudianteActCom_idx")
  @@index([tutorResponsable], map: "tutorAct_idx")
}

model adeudos {
  idAdeudos        Int        @id @default(autoincrement())
  estudianteAdeudo Int
  fecha            String     @db.VarChar(25)
  departamento     String     @db.VarChar(25)
  descripcion      String     @db.VarChar(45)
  cantidad         String     @db.VarChar(10)
  estudiante       estudiante @relation(fields: [estudianteAdeudo], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "estudianteAdeudo")

  @@index([estudianteAdeudo], map: "estudianteAdeudo_idx")
}

model calificaciones {
  idCalificaciones Int        @id @default(autoincrement())
  idEstudiante     Int
  idMateria        Int
  primerP          Int?
  segundoP         Int?
  tercerP          Int?
  cuartoP          Int?
  quintoP          Int?
  estudiante       estudiante @relation(fields: [idEstudiante], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "estudianteCal")
  materia          materia    @relation(fields: [idMateria], references: [idMateria], onDelete: NoAction, onUpdate: NoAction, map: "materiaCal")

  @@index([idEstudiante], map: "estudianteCal_idx")
  @@index([idMateria], map: "materiaCal_idx")
}

model evaluaciondocente {
  idEvaluacionDocente Int        @id @default(autoincrement())
  estudianteEval      Int
  docenteEval         Int
  respuestas          String     @db.VarChar(10)
  estado              String     @db.VarChar(25)
  grupo               grupo      @relation(fields: [docenteEval], references: [idGrupo], onDelete: NoAction, onUpdate: NoAction, map: "docenteEval")
  estudiante          estudiante @relation(fields: [estudianteEval], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "estudianteEval")

  @@index([docenteEval], map: "docenteEval_idx")
  @@index([estudianteEval], map: "estudianteEval_idx")
}

model grupo {
  idGrupo           Int                 @id @default(autoincrement())
  idMateria         Int
  paq               String              @db.VarChar(10)
  lunes             String?             @db.VarChar(20)
  martes            String?             @db.VarChar(20)
  miercoles         String?             @db.VarChar(20)
  jueves            String?             @db.VarChar(20)
  viernes           String?             @db.VarChar(20)
  sabado            String?             @db.VarChar(20)
  salon             String              @db.VarChar(25)
  idDocente         Int
  evaluaciondocente evaluaciondocente[]
  docente           docente             @relation(fields: [idDocente], references: [idDocente], onDelete: NoAction, onUpdate: NoAction, map: "idDocente")
  materia           materia             @relation(fields: [idMateria], references: [idMateria], onDelete: NoAction, onUpdate: NoAction, map: "idMateria")
  grupoestudiante   grupoestudiante[]

  @@index([idDocente], map: "idDocente_idx")
  @@index([idMateria], map: "idMateria_idx")
}

model grupoestudiante {
  idGrupoEstudiante Int        @id @default(autoincrement())
  idGrupo           Int
  idEstudiante      Int
  estudiante        estudiante @relation(fields: [idEstudiante], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "estudianteGrupo")
  grupo             grupo      @relation(fields: [idGrupo], references: [idGrupo], onDelete: NoAction, onUpdate: NoAction, map: "grupo")

  @@index([idEstudiante], map: "idEstudiante_idx")
  @@index([idGrupo], map: "idGrupo_idx")
}

model residencias {
  idResidencias  Int        @id @default(autoincrement())
  estudianteRes  Int
  fechaSolicitud String?    @db.VarChar(45)
  proyecto       String?    @db.VarChar(45)
  duracion       String?    @db.VarChar(45)
  empresa        String?    @db.VarChar(45)
  asesorExterno  String?    @db.VarChar(45)
  asesorInterno  String?    @db.VarChar(45)
  revisor        String?    @db.VarChar(45)
  dictamen       String?    @db.VarChar(45)
  calificacion   String?    @db.VarChar(45)
  estudiante     estudiante @relation(fields: [estudianteRes], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "estudianteRes")

  @@index([estudianteRes], map: "estudianteRes_idx")
}

model servicios {
  idServicios         Int                   @id @default(autoincrement())
  codigo              String                @db.VarChar(15)
  descripcion         String                @db.VarChar(45)
  importe             String                @db.VarChar(15)
  vigencia            String                @db.VarChar(15)
  serviciosestudiante serviciosestudiante[]
}

model serviciosestudiante {
  idServiciosEstudiante Int        @id @default(autoincrement())
  estudianteServicio    Int
  folio                 String     @db.VarChar(10)
  catalogoServicio      Int
  vigencia              String     @db.VarChar(15)
  solicitado            String     @db.VarChar(15)
  validado              String?    @db.VarChar(15)
  sucursal              String     @db.VarChar(15)
  autorizado            String?    @db.VarChar(15)
  servicios             servicios  @relation(fields: [catalogoServicio], references: [idServicios], onDelete: NoAction, onUpdate: NoAction, map: "catalogoServicio")
  estudiante            estudiante @relation(fields: [estudianteServicio], references: [idEstudiante], onDelete: NoAction, onUpdate: NoAction, map: "estudianteServicio")

  @@index([catalogoServicio], map: "catalogoServicio_idx")
  @@index([estudianteServicio], map: "estudianteServicio_idx")
}